Always use queues
Thread safe. No race condition with multiple tasks
Co-operate with RTOS to schedule tasks

application:
	while receiving - sleep if queue is empty
	while transmitting - sleep if queue is full

Semaphores dont contain any payload
Just can be used as signals between 2 tasks/interrupts

//code
	QueueHandle_t q;

	void producer(void *p)
	{
	  int x = 0;
	  
	  while (1) {
	    vTaskDelay(100);
	    xQueueSend(q, &x, 0); // TODO: Find out the significance of the parameters of xQueueSend()
	    ++x;
	  }
	}

	void consumer(void *p)
	{
	  while (1) {
	    // We do not need vTaskDelay() because this task will sleep for up to 100ms until there is an item in the queue
	    if (xQueueReceive(q, &x, 100)) {
	      printf("Got %i\n", x);
	    }
	    else {
	      puts("Timeout --> No data received");
	    }
	  }
	}

	void main(void)
	{
	  // Queue handle is not valid until you create it
	  q = xQueueCreate(10, sizeof(int));
	}
--

//Using ISR
	q = xQueueCreate(10,sizeof(int));
	QueueHandle_t q;
	xQueueSendFromISR(q,&x,NULL);
	xQueueReceive(q,&x,PORTMAX_DELAY);